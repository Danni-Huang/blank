// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuotesApp.Models;

#nullable disable

namespace QuotesApp.Migrations
{
    [DbContext(typeof(QuoteContext))]
    [Migration("20231115020222_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuotesApp.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("QuotesApp.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            QuoteId = 1,
                            Author = "John Wooden",
                            Content = "Things work out best for those who make the best of how things work out.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2008)
                        },
                        new
                        {
                            QuoteId = 2,
                            Author = "Jim Rohn",
                            Content = "If you are not willing to risk the usual you will have to settle for the ordinary.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2096)
                        },
                        new
                        {
                            QuoteId = 3,
                            Author = "Walt Disney",
                            Content = "All our dreams can come true if we have the courage to pursue them.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2099)
                        },
                        new
                        {
                            QuoteId = 4,
                            Author = "Winston Churchill",
                            Content = "Success is walking from failure to failure with no loss of enthusiasm.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2101)
                        },
                        new
                        {
                            QuoteId = 5,
                            Author = "Proverb",
                            Content = "Just when the caterpillar thought the world was ending, he turned into a butterfly.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2104)
                        },
                        new
                        {
                            QuoteId = 6,
                            Author = "Chris Grosser",
                            Content = "Opportunities don't happen, you create them.",
                            LastModified = new DateTime(2023, 11, 14, 21, 2, 22, 270, DateTimeKind.Local).AddTicks(2106)
                        });
                });

            modelBuilder.Entity("QuotesApp.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("QuotesApp.Models.TagAssignment", b =>
                {
                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagAssignments");
                });

            modelBuilder.Entity("QuotesApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuotesApp.Models.Like", b =>
                {
                    b.HasOne("QuotesApp.Models.Quote", "Quote")
                        .WithMany("Likes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("QuotesApp.Models.TagAssignment", b =>
                {
                    b.HasOne("QuotesApp.Models.Quote", "Quote")
                        .WithMany("TagAssignments")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuotesApp.Models.Tag", "Tag")
                        .WithMany("TagAssignments")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("QuotesApp.Models.Quote", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("TagAssignments");
                });

            modelBuilder.Entity("QuotesApp.Models.Tag", b =>
                {
                    b.Navigation("TagAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
